// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def B = TypeUtil.BUILTIN_TOKEN.fileName;
def T = TypeUtil.newTypeParam(Token.new(B, "T", 0, 0), TypeUtil.globalCache);

// The "CiCompiler" component exposes operations that can be called at compile-time
// (initialization time) that can influence the generated code (like optimization hints) or augment
// the generated binary, such as pre-allocating a region of code or data.
class CiCompiler_TypeCon extends Member_TypeCon {
	def ptrType: PointerType;
	def sizeType = Int.getType(false, ptrType.width);

	new(ptrType, typeCache: TypeCache) super("CiCompiler", V3Kind.VOID, 0, typeCache) { }

	def lookupMember(t: Type, name: string) -> LookupResult {
		if (Strings.equal(name, "reserveCodeRegion")) {
			return LookupResult.Inst(V3Op.newReserveCodeRegion(sizeType), null);
		}
		if (Strings.equal(name, "reserveDataRegion")) {
			return LookupResult.Inst(V3Op.newReserveDataRegion(sizeType), null);
		}
		if (Strings.equal(name, "addFunctionSymbol")) {
			return LookupResult.Inst(V3Op.newAddFunctionSymbol(sizeType), null);
		}
		if (Strings.equal(name, "patchAddressAbs32")) {
			var tp = TypeUtil.ONE_TYPE_PARAM.head;
			return LookupResult.Inst(V3Op.newPatchAddressAbs32(tp), TypeUtil.ONE_TYPE_PARAM);
		}
		if (Strings.equal(name, "patchAddressAbs64")) {
			var tp = TypeUtil.ONE_TYPE_PARAM.head;
			return LookupResult.Inst(V3Op.newPatchAddressAbs64(tp), TypeUtil.ONE_TYPE_PARAM);
		}
		return LookupResult.None;
	}
}
