// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// an error, such as a user error, a parsing or typechecking error, etc
class Error(
	range: FileRange,
	sourceLine: string,
	error: string,
	description: string) {

	// convert this error to a string
	def toString() -> string {
		var buffer = StringBuilder.new();
		if (range != null) {
			if (range.beginLine == 0) buffer.put1("[%s]", range.fileName);
			else buffer.put3("[%s @ %d:%d] ", range.fileName, range.beginLine, range.beginColumn);
		}
		if (error != null) buffer.put2("%s: %s", error, description);
		else buffer.puts(description);
		return buffer.toString();
	}
	// report this error to the console, including color highlighting
	def report() {
		if (range != null) {
			Terminal.putc('[');
			Terminal.blue(range.fileName, 0);
			if (range.beginLine > 0) {
				Terminal.put(" @ ");
				Terminal.put(Terminal.CTRL_CYAN);
				Terminal.put2("%d:%d", range.beginLine, range.beginColumn);
				Terminal.put(Terminal.CTRL_DEFAULT);
			}
			Terminal.put("] ");
		}
		if (error == null) Terminal.red("Error", 0);
		else Terminal.red(error, 0);
		Terminal.put(": ");
		Terminal.put(description);
		Terminal.ln();
		if (sourceLine != null && range != null) {
			Terminal.put(sourceLine);
			Terminal.ln();
			var i = 1;
			while (i++ < range.beginColumn) Terminal.sp();
			Terminal.putc('^');
			if (range.endLine == range.beginLine) {
				while (i++ < range.endColumn) Terminal.putc('^');
			}
			Terminal.ln();
		}
	}
}

class ErrorGen(maxErrors: int) {
	var errors: List<Error>;
	var numErrors: int;
	var notTooMany: bool = true;
	var noErrors: bool = true;
	var errorType: Type;
	var unresolvedTypeCache = Strings.newMap<TypeCon>();
	var typeCache: TypeCache;

	def report() {
		Lists.apply(Lists.reverse(errors), Error.report);
		errors = null;
	}
	def fatalReport(context: string) {
		if (noErrors) return;
		report();
		System.error(context, "expected no errors");
	}
	def copy(that: ErrorGen) {
		this.errors = that.errors;
		this.noErrors = that.noErrors;
		this.numErrors = that.numErrors;
		this.notTooMany = that.notTooMany;
	}
	def firstError() -> string {
		if (errors != null) return Lists.reverse(errors).head.toString();
		return "";
	}
	def getErrorTypeCon(name: string) -> TypeCon {
		var typeCon = unresolvedTypeCache[name];
		if (typeCon == null) {
			if (typeCache == null) typeCache = TypeCache.new();
			typeCon = TypeCon.new(name, Kind.VOID, -1, typeCache);
			unresolvedTypeCache[name] = typeCon;
		}
		return typeCon;
	}
	def getErrorTypeNamed(name: string) -> Type {
		return getErrorTypeCon(name).create0();
	}
	def getErrorType() -> Type {
		if (errorType != null) return errorType;
		return errorType = getErrorTypeCon("?").create0();
	}
	def unimplemented() {
		fail("not implemented");
	}
	def fail(msg: string) {
		if (CLOptions.FATAL.get()) return V3.fail(msg);
		addError(null, null, V3Exception.InternalError, msg);
	}
	def OutputError(fileName: string) {
		addError(null, null, "Cannot create output file", fileName);
	}
	def ExceptionInInitialization(meth: VstMethod, except: Exception) {
		var msg = TerminalBuffer.new().putv(except, null).toString();
		addError(meth.token.range(), null, "ExceptionInInitialization", msg);
	}
	def FileNotFound(fname: string) {
		addError(null, null, "File not found", fname);
	}
	def MainNotFound() {
		addError(null, null, null, "Main not found");
	}
	def addError(range: FileRange, sourceLine: string, error: string, msg: string) {
		errors = List.new(Error.new(range, sourceLine, error, msg), errors);
		incErrors();
	}
	def unexpectedType<T>(t: Type, v: T) -> T {
		var msg = Strings.format1("unexpected type %q", t.render);
		if (CLOptions.FATAL.get()) return V3.fail(msg);
		addError(null, null, null, msg);
		return v;
	}
	def incErrors() {
		numErrors++;
		noErrors = false;
		if (numErrors >= maxErrors) notTooMany = false;
	}
}
