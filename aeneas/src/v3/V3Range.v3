// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for dealing with range types in Virgil
component V3Range {
	def TYPECON = Simple_TypeCon.new("Range", V3Kind.RANGE, 1, TypeUtil.globalCache, RangeType.new(_, true, _, _));
	def RO_TYPECON = Simple_TypeCon.new("range", V3Kind.RANGE, 1, TypeUtil.globalCache, RangeType.new(_, false, _, _));

	def newType(elementType: Type) -> Type {
		return TYPECON.create1(elementType);
	}
}
// The representation of the built-in writeable range type.
class RangeType extends Type {
	def writeable: bool;
	new(hash: int, writeable, typeCon: TypeCon, nested: List<Type>) super(hash, typeCon, nested) { }
	def elementType() -> Type {
		return nested.head;
	}
}
// A value representing a (sub)range of an array; the record, the {start}, and the {length}.
class ArrayRangeVal(array: Record, start: int, length: int) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (other == null) return array == null && start == 0 && length == 0;
		if (!ArrayRangeVal.?(other)) return false;
		var that = ArrayRangeVal.!(other);
		return this.array == that.array && this.start == that.start && this.length == that.length;
	}
	def hash() -> int {
		var h = if(array != null, array.id);
		return h + start * 33 + length * 97;
	}
}
