// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Global unittest registry.
component UnitTests {
	private var buf = StringBuilder.new();
	private def expected = Strings.newMap<bool>(); // contains expected failures
	private var list: List<UnitTest>;
	var fatal: bool = false;
	var trace: bool = false;

	// Registration methods.
	def register(name: string, fun: Tester -> ()) {
		list = List.new(UnitTest(name, fun), list);
	}
	def registerT<T>(prefix: string, name: string, n: Tester -> T, f: T -> void) {
		if (prefix != null) name = buf.reset().puts(prefix).puts(name).extract();
		register(name, runNew<T>(_, n, f));
	}
	private def runNew<T>(t: Tester, n: Tester -> T, f: T -> ()) {
		return f(n(t));
	}

	// Run method, e.g. from command-line. Parses {args}.
	def run(args: Array<string>) -> int {
		var matchers = Vector<GlobMatcher>.new();
		// Parse options first
		for (i < args.length) {
			var arg = args[i];
			if (arg == null) continue;
			if (arg.length > 0 && arg[0] == '-') {
				if (Strings.equal(arg, "-fatal")) {
					fatal = true;
				} else if (Strings.startsWith(arg, "-expected=")) {
					loadExpectedFile(expected, Arrays.range(arg, "-expected=".length, arg.length));
				} else {
					System.puts("Unknown option: ");
					System.puts(arg);
					System.ln();
					return 1;
				}
			} else {
				matchers.put(GlobMatcher.new(arg));
			}

		}
		// Filter the registered tests with matchers
		var count = 0, r: List<UnitTest>;
		for (l = UnitTests.list; l != null; l = l.tail) { // count and reverse list
			var t = l.head;
			if (matchers.length > 0) {
				var skip = true;
				for (i < matchers.length) {
					if (skip) skip = !matchers[i].matches(t.name);
				}
				if (skip) continue;
			}
			r = List.new(l.head, r);
			count++;
		}
		// Run tests
		System.puts("##>");
		System.puti(count);
		System.puts(" unit tests\n");
		var fail = false;
		for (l = r; l != null; l = l.tail) {
			var u = l.head;
			var t = Tester.new(u.name);
			System.puts("##+");
			System.puts(u.name);
			System.ln();
			var before = System.ticksUs();
			u.fun(t);
			if (trace) {
				var diff = System.ticksUs() - before;
				System.puts("##@");
				System.puts(u.name);
				System.puts(" : ");
				System.puti(diff);
				System.puts(" us\n");
			}
			if (t.ok) {
				System.puts("##-ok\n");
			} else if (expected[u.name]) {
				System.puts("##-ok (ignored failure: ");
				System.puts(t.msg);
				System.puts(")\n");
			} else {
				fail = true;
				System.puts("##-fail (");
				System.puts(t.msg);
				System.puts(")\n");
			}
		}
		return if(fail, 1, 0);
	}
}

// An individual unit test.
private type UnitTest(name: string, fun: Tester -> ()) #unboxed;

// Load a file that contains expected failures, one on each line
def loadExpectedFile(expected: Map<string, bool>, fileName: string) {
	var data = System.fileLoad(fileName);
	if (data == null) return;
	var line = 0, pos = 0;
	while (pos < data.length) {
		if (data[pos] == '\n') {
			var test = Arrays.range(data, line, pos);
			if (UnitTests.trace) {
				System.puts("ignore: ");
				System.puts(test);
				System.ln();
			}
			if (pos > line) expected[test] = true;
			line = pos + 1;
		}
		pos++;
	}
	if (pos > line) {
		var test = Arrays.range(data, line, pos);
		if (UnitTests.trace) {
			System.puts("ignore: ");
			System.puts(test);
			System.ln();
		}
		expected[test] = true;
		line = pos + 1;
	}
}
