// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A {Tester} is instantiated for each execution of a unit test. It contains
// methods that help with assertions and matching. It outputs failures in the
// standard format (for the "progress" utility) directly to the stdout.
class Tester(name: string) {
	var ok = true;
	var msg: string;

	def fail(msg: string) {
		if (!ok) return;
		this.ok = false;
		this.msg = msg;
		if (UnitTests.fatal) {
			System.error("UnitTestError", msg);
		}
	}
	def assert(cond: bool, msg: string) -> this {
		if (!cond) fail(msg);
	}
	def asserti(expected: int, got: int) -> this {
		if (expected != got) fail2("expected %d, got %d", expected, got);
	}
	def assertz(expected: bool, got: bool) -> this {
		if (expected != got) fail2("expected %z, got %z", expected, got);
	}
	def assertl(expected: long, got: long) -> this {
		if (expected != got) fail2("expected %d, got %d", expected, got);
	}
	def assert_eq<T>(a: T, b: T) -> this {
		if (a != b) {
			var buf = StringBuilder.new().puts("expected ");
			render(buf, a);
			buf.puts(" == ");
			render(buf, b);
			fail(buf.toString());
		}
	}
	def assert_ne<T>(a: T, b: T) -> this {
		if (a == b) {
			var buf = StringBuilder.new().puts("expected ");
			render(buf, a);
			buf.puts(" != ");
			render(buf, b);
			fail(buf.toString());
		}
	}
	def assert_type<F, T>(v: F) -> this {
		if (!T.?(v)) fail("expected type");
	}
	def assertb(expected: Array<byte>, got: Array<byte>) -> this {
		asserta("data", expected, got, StringBuilder.putx<byte>);
	}
	def assert_string(expected: string, got: string) -> this {
		if (!Strings.equal(expected, got)) {
			var msg = StringBuilder.new().puts("expected ");
			if (expected == null) msg.puts("null");
			else msg.putsq(expected);
			msg.puts(", got ");
			if (got == null) msg.puts("null");
			else msg.putsq(got);
			fail(msg.extract());
		}
	}
	def asserta<T>(thing: string, expected: Array<T>, got: Array<T>, render: (StringBuilder, T) -> StringBuilder) {
		if (expected.length != got.length) {
			return fail3("expected %s.length == %d, got %d", thing, expected.length, got.length);
		}
		for (i < expected.length) {
			if (expected[i] != got[i]) {
				var msg = StringBuilder.new()
					.put2("expected %s[%d]", thing, i)
					.put2(" == %q, got %q", render(_, expected[i]), render(_, got[i]))
					.extract();
				return fail(msg);
			}
		}
	}
	def assertar<T>(thing: string, expected: Array<T>, got: Array<T>, render: (T, StringBuilder) -> StringBuilder) {
		return asserta(thing, expected, got, commute(render, _));
	}
	def commute<A, B, R>(f: (A, B) -> R, t: (B, A)) -> R { // XXX: factor out to good location
		return f(t.1, t.0);
	}
	private def render<T>(buf: StringBuilder, v: T) -> StringBuilder {
		match (v) {
			x: u32 => buf.putd(x);
			x: int => buf.putd(x);
			x: u64 => buf.putd(x);
			x: long => buf.putd(x);
			x: bool => buf.putz(x);
			x: string => buf.putsq(x);
		}
		return buf;
	}
	def fail1<T>(msg: string, a: T) {
		fail(Strings.format1(msg, a));
	}
	def fail2<T, U>(msg: string, a: T, b: U) {
		fail(Strings.format2(msg, a, b));
	}
	def fail3<T, U, V>(msg: string, a: T, b: U, c: V) {
		fail(Strings.format3(msg, a, b, c));
	}
}
